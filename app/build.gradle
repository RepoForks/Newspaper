apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-crash'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'org.standardout.versioneye'

jacoco {
    toolVersion '0.7.9'
}

String VERSION_REVISION = 'git rev-list --count HEAD'.execute().text.trim()
String VERSION_HASH     = 'git rev-parse --short HEAD'.execute().text.trim()

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.0'
    defaultConfig {
        applicationId    'com.github.ayltai.newspaper'
        minSdkVersion    16
        targetSdkVersion 26
        versionCode      17
        versionName      '2.1.3r' + VERSION_REVISION + '-' + VERSION_HASH

        testInstrumentationRunner          'android.support.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments disableAnalytics: 'true'

        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile     file('../key-store.jks')
            keyAlias      System.getenv('ANDROID_KEY_ALIAS')
            storePassword System.getenv('ANDROID_STORE_PASSWORD')
            keyPassword   System.getenv('ANDROID_KEY_PASSWORD')
        }
    }

    buildTypes {
        debug {
            multiDexEnabled     true
            testCoverageEnabled true

            ext.enableCrashlytics = false
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses true
            }
        }
    }

    lintOptions {
        abortOnError false
        disable     'RestrictedApi'
        disable     'MissingTranslation'
    }

    dexOptions {
        preDexLibraries false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

checkstyle {
    configFile     rootProject.file('checkstyle.xml')
    showViolations true
}

configurations {
    codacy
}

ext {
    supportLibraryVersion = '26.0.0-beta2'
    firebaseSdkVersion    = '11.0.2'
    daggerVersion         = '2.11'
    frescoVersion         = '1.3.0'
    bigImageViewerVersion = '1.3.0'
    exoPlayerVersion      = 'r2.4.3'
    debugDrawerVersion    = '0.7.0'
    stethoVersion         = '1.5.0'
    leakCanaryVersion     = '1.5.1'
    robolectricVersion    = '3.4-rc2'
    espressoVersion       = '2.2.2'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    debugCompile 'com.android.support:multidex:1.0.1'

    // Android Support libraries
    compile "com.android.support:support-annotations:${supportLibraryVersion}"
    compile "com.android.support:appcompat-v7:${supportLibraryVersion}"
    compile "com.android.support:support-compat:${supportLibraryVersion}"
    compile "com.android.support:support-v13:${supportLibraryVersion}"
    compile "com.android.support:support-v4:${supportLibraryVersion}"
    compile "com.android.support:design:${supportLibraryVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibraryVersion}"
    compile "com.android.support:cardview-v7:${supportLibraryVersion}"
    compile "com.android.support:support-core-utils:${supportLibraryVersion}"
    compile "com.android.support:preference-v7:${supportLibraryVersion}"
    compile "com.android.support:preference-v14:${supportLibraryVersion}"
    compile ('com.takisoft.fix:preference-v7:25.4.0.3') {
        exclude group: 'com.android.support', module: 'preference-v7'
        exclude group: 'com.android.support', module: 'preference-v14'
    }

    // Firebase
    compile ("com.google.firebase:firebase-core:${firebaseSdkVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile ("com.google.firebase:firebase-crash:${firebaseSdkVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile ("com.google.firebase:firebase-config:${firebaseSdkVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
    }

    // Fabric
    releaseCompile('io.fabric.sdk.android:fabric:1.3.17@aar') {
        transitive = true;
    }
    releaseCompile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    releaseCompile('com.crashlytics.sdk.android:answers:1.3.13@aar') {
        transitive = true;
    }
    testCompile('com.crashlytics.sdk.android:answers:1.3.13@aar') {
        transitive = true;
    }

    // ReactiveX
    compile 'io.reactivex.rxjava2:rxjava:2.1.1'
    compile ('io.reactivex.rxjava2:rxandroid:2.0.1') {
        exclude group: 'io.reactivex', module: 'rxjava'
    }
    compile ('com.jakewharton.rxbinding2:rxbinding:2.0.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'io.reactivex',        module: 'rxjava'
        exclude group: 'io.reactivex',        module: 'rxandroid'
    }

    // Dagger 2
    compile "com.google.dagger:dagger:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    // Flow by Square
    compile ('com.squareup.flow:flow:1.0.0-alpha3') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    // Networking
    compile 'com.squareup.okhttp3:okhttp:3.8.1'

    // Database
    compile 'io.realm:android-adapters:2.1.0'

    // Image processing
    compile "com.facebook.fresco:fresco:${frescoVersion}"
    compile "com.facebook.fresco:imagepipeline-okhttp3:${frescoVersion}"
    compile ('com.github.stfalcon:frescoimageviewer:0.5.0') {
        exclude group: 'com.facebook.fresco', module: 'fresco'
    }
    compile ("com.google.android.gms:play-services-vision:${firebaseSdkVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile ('com.davemorrissey.labs:subsampling-scale-image-view:3.6.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    compile ("com.github.piasy:BigImageViewer:${bigImageViewerVersion}") {
        exclude group: 'com.android.support',    module: 'support-annotations'
        exclude group: 'com.davemorrissey.labs', module: 'subsampling-scale-image-view'
    }
    compile ("com.github.piasy:FrescoImageLoader:${bigImageViewerVersion}") {
        exclude group: 'com.facebook.fresco', module: 'fresco'
    }
    compile "com.github.piasy:ProgressPieIndicator:${bigImageViewerVersion}"

    // Video processing
    compile "com.google.android.exoplayer:exoplayer-core:${exoPlayerVersion}"
    compile "com.google.android.exoplayer:exoplayer-ui:${exoPlayerVersion}"

    // Eye candies
    compile ('hanks.xyz:smallbang-library:0.1.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    compile ('com.github.javiersantos:MaterialStyledDialogs:2.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-core-utils'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    compile 'com.github.Yalantis:GuillotineMenu-Android:1.2'
    compile ('jp.wasabeef:recyclerview-animators:2.2.6') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-core-utils'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    compile 'com.flaviofaria:kenburnsview:1.0.7'
    compile 'com.gjiazhe:PanoramaImageView:1.0'

    // Debugging
    debugCompile 'jp.wasabeef:takt:1.0.4'
    debugCompile ("io.palaima.debugdrawer:debugdrawer:${debugDrawerVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    debugCompile ("io.palaima.debugdrawer:debugdrawer-commons:${debugDrawerVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    debugCompile ("io.palaima.debugdrawer:debugdrawer-fps:${debugDrawerVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    debugCompile "com.facebook.stetho:stetho:${stethoVersion}"
    debugCompile "com.facebook.stetho:stetho-okhttp3:${stethoVersion}"
    debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    testCompile  "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    // Tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.8.52'
    testCompile "org.robolectric:robolectric:${robolectricVersion}"
    testCompile "org.robolectric:shadows-multidex:${robolectricVersion}"
    androidTestCompile ('com.android.support.test:runner:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-core:${espressoVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:${espressoVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-intents:${espressoVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    // Code coverage by Codacy
    codacy 'com.github.codacy:codacy-coverage-reporter:1.0.13'
}

task customFindBugs(type: FindBugs) {
    ignoreFailures = false
    effort         = "max"
    reportLevel    = "medium"
    classes        = files("$project.buildDir/intermediates/classes")

    // Use this only if you want exclude some errors
    excludeFilter = file("$rootProject.rootDir/findbugs-android-exclude.xml")

    source    = fileTree('src/main/java/')
    classpath = files()

    reports {
        xml.enabled      = false
        xml.withMessages = true
        html.enabled     = true
        xml.destination  "$project.buildDir/outputs/findbugs/findbugs-output.xml"
        html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
    }
}

afterEvaluate {
    initFabricPropertiesIfNeeded()
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')

    if (!propertiesFile.exists()) {
        ant.propertyfile(file: 'fabric.properties', comment: 'Contains API Secret used to validate your application. Commit to internal source control; avoid making secret public.') {
            entry(key: 'apiSecret', value: fabricApiSecret)
            entry(key: 'apiKey',    value: fabricApiKey)
        }
    }
}

assemble.dependsOn customFindBugs

def coverageSourceDirs = [
    'src/main/java',
    'src/debug/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group       = 'Reporting'
    description = 'Generate Jacoco coverage reports'

    reports {
        xml.enabled  = true
        html.enabled = true
    }

    classDirectories = fileTree(
        dir: 'build/intermediates/classes/test/debug',
        excludes: [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*$RealmProxy.*'
        ]
    )

    sourceDirectories = files(coverageSourceDirs)
    executionData     = files('build/jacoco/testDebugUnitTest.exec')

    doFirst {
        files('build/intermediates/classes/test/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

task uploadCoverageToCodacy(type: JavaExec, dependsOn : jacocoTestReport) {
    main      = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy

    args = [
        "-l",
        "Java",
        "-r",
        "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    ]
}

task (codacyDepsize) << {
    def size = 0;

    configurations.codacy.collect {
        it.length() / (1024 * 1024)
    }
    .each {
        size += it
    }

    println "Total dependencies size: ${Math.round(size * 100) / 100} MB"

    configurations.codacy.sort {
        -it.length()
    }
    .each {
        println "${it.name}: ${Math.round(it.length() / (1024) * 100) / 100} KB"
    }
}

task (codacyLocs) << {
    configurations.codacy.each {
        String  jarName = it
        println jarName
    }
}

apply plugin: 'com.google.gms.google-services'
